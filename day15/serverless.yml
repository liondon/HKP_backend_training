service: hello-serverless

frameworkVersion: "2"

provider:
  # you can overwrite defaults here
  #  stage: dev
  #  region: us-east-1
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: Admin

  # you can define service wide environment variables here
  environment:
    tableName: ${self:custom.tableName}
  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
          Resource:'*'

custom:
  tableName: WebsocketUsers

# you can add packaging information here
# package:
#   individually: true
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  websocket-connect:
    handler: src/functions/connect.handler
    events:
      - websocket:
          route: $connect
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#   Resources:
#     DemoResource:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: ${self:custom.bucketName}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
